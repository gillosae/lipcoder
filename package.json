{
  "name": "lipcoder",
  "displayName": "LipCoder",
  "publisher": "your-publisher-id",
  "description": "",
  "version": "0.0.1",
  "engines": {
    "vscode": "^1.98.2"
  },
  "private": true,
  "workspaces": [
    "client",
    "server"
  ],
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "*"
  ],
  "main": "./dist/client/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "lipcoder.helloWorld",
        "title": "Hello World"
      },
      {
        "command": "lipcoder.echoTest",
        "title": "LipCoder: Echo Test"
      },
      {
        "command": "lipcoder.whereAmI",
        "title": "LipCoder: Where Am I?"
      },
      {
        "command": "lipcoder.readLineTokens",
        "title": "LipCoder: Read Line Tokens"
      },
      {
        "command": "lipcoder.stopReadLineTokens",
        "title": "Stop LipCoder Speech"
      },
      {
        "command": "lipcoder.toggleTypingSpeech",
        "title": "LipCoder: Toggle Typing Speech"
      },
      {
        "command": "lipcoder.togglePanning",
        "title": "LipCoder: Toggle Audio Panning"
      },
      {
        "command": "lipcoder.readCurrentLine",
        "title": "LipCoder: Read Current Line Number"
      },
      {
        "command": "lipcoder.toggleReadMode",
        "title": "LipCoder: Toggle Read Mode"
      },
      {
        "command": "lipcoder.readFunctionTokens",
        "title": "LipCoder: Read Function Tokens"
      },
      {
        "command": "lipcoder.breadcrumb",
        "title": "LipCoder: Read Breadcrumb"
      },
      {
        "command": "lipcoder.symbolTree",
        "title": "LipCoder: Speak Symbol Tree"
      },
      {
        "command": "lipcoder.switchPanel",
        "title": "LipCoder: Switch Panel"
      },
      {
        "command": "lipcoder.functionList",
        "title": "LipCoder: Function List"
      },
      {
        "command": "lipcoder.fileTree",
        "title": "LipCoder: File Tree"
      },
      {
        "command": "lipcoder.explorerUp",
        "title": "LipCoder: Explorer Up"
      },
      {
        "command": "lipcoder.explorerDown",
        "title": "LipCoder: Explorer Down"
      },
      {
        "command": "lipcoder.openTerminal",
        "title": "LipCoder: Open Pseudo Terminal"
      },
      {
        "command": "lipcoder.formatCode",
        "title": "LipCoder: Format Code"
      },
      {
        "command": "lipcoder.setOpenAIAPIKey",
        "title": "LipCoder: Set OpenAI API Key"
      },
      {
        "command": "lipcoder.vibeCoding",
        "title": "LipCoder: Vibe Coding - Modify Code with Natural Language"
      },

      {
        "command": "lipcoder.startASRStreaming",
        "title": "Start ASR Streaming",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.stopASRStreaming",
        "title": "Stop ASR Streaming",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.toggleASRStreaming",
        "title": "Toggle ASR Streaming",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.toggleASR",
        "title": "Toggle ASR",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.showASROutput",
        "title": "Show ASR Output",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.clearASROutput",
        "title": "Clear ASR Output",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.getASRStatus",
        "title": "Get ASR Status",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.openASRTestPage",
        "title": "Open ASR Test Page",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.testASRServer",
        "title": "Test ASR Server",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.openPushToTalkTestPage",
        "title": "LipCoder: Open Push-to-Talk Test Page"
      },
      {
        "command": "lipcoder.setPlaySpeed",
        "title": "LipCoder: Set Playback Speed"
      },
      {
        "command": "lipcoder.setPlaySpeedSlow",
        "title": "LipCoder: Set Playback Speed - Slow (0.8×)"
      },
      {
        "command": "lipcoder.setPlaySpeedNormal",
        "title": "LipCoder: Set Playback Speed - Normal (1.0×)"
      },
      {
        "command": "lipcoder.setPlaySpeedFast",
        "title": "LipCoder: Set Playback Speed - Fast (1.5×)"
      },
      {
        "command": "lipcoder.setPlaySpeedVeryFast",
        "title": "LipCoder: Set Playback Speed - Very Fast (2.0×)"
      },
      {
        "command": "lipcoder.togglePitchPreservation",
        "title": "LipCoder: Toggle Pitch Preservation"
      },
      {
        "command": "lipcoder.toggleReadMode",
        "title": "LipCoder: Toggle Read Mode (Token/Word)"
      },
      {
        "command": "lipcoder.toggleAudioMinimap",
        "title": "LipCoder: Toggle Audio Minimap"
      },
      {
        "command": "lipcoder.setAudioMinimapSpeed",
        "title": "LipCoder: Set Audio Minimap Speed Threshold"
      }
    ],
    "keybindings": [
      {
        "command": "lipcoder.stopReadLineTokens",
        "key": "ctrl+alt+s",
        "mac": "ctrl+alt+s",
        "when": "editorTextFocus"
      },
      {
        "command": "lipcoder.readCurrentLine",
        "key": "ctrl+alt+l",
        "when": "editorTextFocus"
      },
      {
        "key": "ctrl+alt+m",
        "command": "lipcoder.toggleReadMode",
        "when": "editorTextFocus"
      },
      {
        "command": "lipcoder.readFunctionTokens",
        "key": "ctrl+alt+f",
        "when": "editorTextFocus"
      },
      {
        "key": "up",
        "command": "lipcoder.explorerUp",
        "when": "explorerViewletVisible && explorerViewletFocus"
      },
      {
        "key": "down",
        "command": "lipcoder.explorerDown",
        "when": "explorerViewletVisible && explorerViewletFocus"
      },
      {
        "command": "lipcoder.formatCode",
        "key": "shift+alt+f",
        "when": "editorTextFocus && !editorReadonly"
      },
      {
        "command": "lipcoder.acceptSuggestion",
        "key": "shift+enter",
        "when": "inlineSuggestionVisible"
      },
      {
        "command": "lipcoder.rejectSuggestion",
        "key": "escape",
        "when": "editorTextFocus && inlineSuggestionVisible"
      },
      {
        "command": "lipcoder.rejectSuggestion",
        "key": "backspace",
        "when": "editorTextFocus && inlineSuggestionVisible"
      },
      {
        "command": "lipcoder.vibeCoding",
        "key": "ctrl+shift+v",
        "when": "editorTextFocus"
      }
    ],
    "configuration": {
      "title": "LipCoder",
      "properties": {
        "lipcoder.openaiApiKey": {
          "type": "string",
          "default": "",
          "description": "Your OpenAI API key for ChatGPT completions."
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "npm run check-types && npm run lint && node esbuild.js",
    "watch": "npm-run-all -p watch:*",
    "watch:esbuild": "node esbuild.js --watch",
    "watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
    "package": "npm run check-types && npm run lint && node esbuild.js --production",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "check-types": "tsc --noEmit -p shared/tsconfig.json && tsc --noEmit -p server/tsconfig.json && tsc --noEmit -p client/tsconfig.json",
    "lint": "eslint client/src server/src shared/src",
    "test": "vscode-test",
    "build": "tsc -b shared && tsc -b server && tsc -b client",
    "watch:build": "tsc -b server --watch & tsc -b client --watch",
    "postinstall": "node ./scripts/download-silero-models.js"
  },
  "devDependencies": {
    "@electron/rebuild": "^4.0.1",
    "@types/mocha": "^10.0.10",
    "@types/node": "20.x",
    "@types/node-fetch": "^2.6.12",
    "@types/vscode": "^1.100.0",
    "@typescript-eslint/eslint-plugin": "^8.31.1",
    "@typescript-eslint/parser": "^8.31.1",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.5.2",
    "esbuild": "^0.25.3",
    "eslint": "^9.25.1",
    "npm-run-all": "^4.1.5",
    "typescript": "^5.8.3"
  },
  "dependencies": {
    "node-fetch": "^3.3.2",
    "speaker": "^0.5.5",
    "ts-node": "^10.9.2",
    "undici": "^7.11.0",
    "vscode-languageclient": "^9.0.0",
    "vscode-languageserver": "^9.0.1",
    "wav": "^1.0.2",
    "word-list": "^4.1.0"
  }
}