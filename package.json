{
  "name": "lipcoder",
  "displayName": "LipCoder",
  "publisher": "lipcoder-dev",
  "description": "LipCoder - Audio-Enhanced Code Editor",
  "version": "0.0.1",
  "engines": {
    "vscode": "^1.74.0",
    "node": "23.11.0",
    "npm": "10.9.2"
  },
  "private": true,
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "*"
  ],
  "main": "./dist/client/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "lipcoder.helloWorld",
        "title": "Hello World"
      },
      {
        "command": "lipcoder.echoTest",
        "title": "LipCoder: Echo Test"
      },
      {
        "command": "lipcoder.whereAmI",
        "title": "LipCoder: Where Am I?"
      },
      {
        "command": "lipcoder.readLineTokens",
        "title": "LipCoder: Read Line Tokens"
      },
      {
        "command": "lipcoder.stopReadLineTokens",
        "title": "Stop LipCoder Speech"
      },
      {
        "command": "lipcoder.toggleTypingSpeech",
        "title": "LipCoder: Toggle Typing Speech"
      },
      {
        "command": "lipcoder.togglePanning",
        "title": "LipCoder: Toggle Audio Panning"
      },
      {
        "command": "lipcoder.readCurrentLine",
        "title": "LipCoder: Read Current Line Number"
      },
      {
        "command": "lipcoder.toggleReadMode",
        "title": "LipCoder: Toggle Read Mode"
      },
      {
        "command": "lipcoder.readFunctionTokens",
        "title": "LipCoder: Read Function Tokens"
      },
      {
        "command": "lipcoder.breadcrumb",
        "title": "LipCoder: Read Breadcrumb"
      },
      {
        "command": "lipcoder.symbolTree",
        "title": "LipCoder: Speak Symbol Tree"
      },
      {
        "command": "lipcoder.switchPanel",
        "title": "LipCoder: Switch Panel"
      },
      {
        "command": "lipcoder.functionList",
        "title": "LipCoder: Function List"
      },
      {
        "command": "lipcoder.fileTree",
        "title": "LipCoder: File Tree"
      },
      {
        "command": "lipcoder.goToExplorer",
        "title": "LipCoder: Go To Explorer"
      },
      {
        "command": "lipcoder.goToEditor",
        "title": "LipCoder: Go To Editor"
      },
      {
        "command": "lipcoder.openFile",
        "title": "LipCoder: Open File"
      },
      {
        "command": "lipcoder.syntaxErrorList",
        "title": "LipCoder: Show Syntax Error List (Dev)"
      },
      {
        "command": "lipcoder.nextSyntaxError",
        "title": "LipCoder: Next Syntax Error"
      },
      {
        "command": "lipcoder.previousSyntaxError",
        "title": "LipCoder: Previous Syntax Error"
      },
      {
        "command": "lipcoder.firstSyntaxError",
        "title": "LipCoder: First Syntax Error"
      },
      {
        "command": "lipcoder.explorerUp",
        "title": "LipCoder: Explorer Up"
      },
      {
        "command": "lipcoder.explorerDown",
        "title": "LipCoder: Explorer Down"
      },
      {
        "command": "lipcoder.openTerminal",
        "title": "LipCoder: Open Pseudo Terminal"
      },
      {
        "command": "lipcoder.smartGoToTerminal",
        "title": "LipCoder: Smart Go To Terminal"
      },
      {
        "command": "lipcoder.killTerminalAndOpenLipCoder",
        "title": "LipCoder: Kill Terminal and Open LipCoder Terminal"
      },
      {
        "command": "lipcoder.terminalReadHistory",
        "title": "LipCoder: Read Terminal History"
      },
      {
        "command": "lipcoder.terminalReadLast",
        "title": "LipCoder: Read Last Terminal Output"
      },
      {
        "command": "lipcoder.terminalHistoryUp",
        "title": "LipCoder: Terminal History Up"
      },
      {
        "command": "lipcoder.terminalHistoryDown",
        "title": "LipCoder: Terminal History Down"
      },
      {
        "command": "lipcoder.terminalClearHistory",
        "title": "LipCoder: Clear Terminal History"
      },
      {
        "command": "lipcoder.addTerminalOutput",
        "title": "LipCoder: Add Terminal Output for Navigation"
      },
      {
        "command": "lipcoder.debugTerminalState",
        "title": "LipCoder: Debug Terminal State"
      },
      {
        "command": "lipcoder.setupTerminalDemo",
        "title": "LipCoder: Setup Terminal Demo Content"
      },
      {
        "command": "lipcoder.toggleTerminalReadingMode",
        "title": "LipCoder: Toggle Terminal Reading Mode"
      },
      {
        "command": "lipcoder.formatCode",
        "title": "LipCoder: Format Code"
      },
      {
        "command": "lipcoder.setOpenAIAPIKey",
        "title": "LipCoder: Set OpenAI API Key"
      },
      {
        "command": "lipcoder.setClaudeAPIKey",
        "title": "LipCoder: Set Claude API Key"
      },
      {
        "command": "lipcoder.toggleAutoOverwrite",
        "title": "LipCoder: Toggle Auto-Overwrite Files"
      },
      {
        "command": "lipcoder.selectLLMBackend",
        "title": "LipCoder: Select LLM Backend (ChatGPT/Claude)",
        "category": "LLM"
      },
      {
        "command": "lipcoder.switchToChatGPT",
        "title": "LipCoder: Switch to ChatGPT",
        "category": "LLM"
      },
      {
        "command": "lipcoder.switchToClaude",
        "title": "LipCoder: Switch to Claude",
        "category": "LLM"
      },
      {
        "command": "lipcoder.showLLMStatus",
        "title": "LipCoder: Show LLM Backend Status",
        "category": "LLM"
      },
      {
        "command": "lipcoder.vibeCoding",
        "title": "LipCoder: Vibe Coding - Modify Code with Natural Language"
      },
      {
        "command": "lipcoder.applyCurrentChange",
        "title": "LipCoder: Apply Current Vibe Coding Changes",
        "category": "Vibe Coding"
      },
      {
        "command": "lipcoder.rejectCurrentChange",
        "title": "LipCoder: Reject Current Vibe Coding Changes",
        "category": "Vibe Coding"
      },
      {
        "command": "lipcoder.showCurrentChangeDetails",
        "title": "LipCoder: Show Current Change Details",
        "category": "Vibe Coding"
      },
      {
        "command": "lipcoder.handleVibeCodingVoiceCommand",
        "title": "LipCoder: Handle Vibe Coding Voice Command",
        "category": "Vibe Coding"
      },
      {
        "command": "lipcoder.analyzeCode",
        "title": "LipCoder: Analyze Code - Ask Questions About Your Code",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.selectAndAnalyzeImage",
        "title": "LipCoder: Describe Image for Accessibility",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.analyzeImageFromExplorer",
        "title": "LipCoder: Analyze This Image",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.acceptDiff",
        "title": "LipCoder: Accept Diff Changes",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.rejectDiff",
        "title": "LipCoder: Reject Diff Changes",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.startASRStreaming",
        "title": "Start ASR Streaming",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.stopASRStreaming",
        "title": "Stop ASR Streaming",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.toggleASRStreaming",
        "title": "Toggle ASR Streaming",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.toggleASR",
        "title": "Toggle ASR",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.showASROutput",
        "title": "Show ASR Output",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.clearASROutput",
        "title": "Clear ASR Output",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.getASRStatus",
        "title": "Get ASR Status",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.openASRTestPage",
        "title": "Open ASR Test Page",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.testASRServer",
        "title": "Test ASR Server",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.startASRRecording",
        "title": "Start ASR Recording",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.stopASRRecording",
        "title": "Stop ASR Recording",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.toggleASRRecording",
        "title": "Toggle ASR Recording",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.switchASRBackend",
        "title": "Switch ASR Backend",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.showASRPopup",
        "title": "Show ASR Popup",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.showEnhancedASROutput",
        "title": "Show Enhanced ASR Output",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.clearEnhancedASROutput",
        "title": "Clear Enhanced ASR Output",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.showCommandPatterns",
        "title": "Show Available Voice Command Patterns",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.toggleCommandRouter",
        "title": "Toggle Voice Command Router",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.addCustomCommandPattern",
        "title": "Add Custom Voice Command Pattern",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.toggleLLMMatching",
        "title": "Toggle LLM Command Matching",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.goToFunction",
        "title": "Go to Function (Voice)",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.runPackageScript",
        "title": "Run Package.json Script (Voice)",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.debugASRState",
        "title": "Debug ASR State",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.openPushToTalkTestPage",
        "title": "LipCoder: Open Push-to-Talk Test Page"
      },
      {
        "command": "lipcoder.setPlaySpeed",
        "title": "LipCoder: Set Playback Speed"
      },
      {
        "command": "lipcoder.setPlaySpeedSlow",
        "title": "LipCoder: Set Playback Speed - Slow (0.8×)"
      },
      {
        "command": "lipcoder.setPlaySpeedNormal",
        "title": "LipCoder: Set Playback Speed - Normal (1.0×)"
      },
      {
        "command": "lipcoder.setPlaySpeedFast",
        "title": "LipCoder: Set Playback Speed - Fast (1.5×)"
      },
      {
        "command": "lipcoder.setPlaySpeedVeryFast",
        "title": "LipCoder: Set Playback Speed - Very Fast (2.0×)"
      },
      {
        "command": "lipcoder.clearAudioCache",
        "title": "LipCoder: Clear Audio Cache (Fix Crackling)"
      },
      {
        "command": "lipcoder.togglePitchPreservation",
        "title": "LipCoder: Toggle Pitch Preservation"
      },
      {
        "command": "lipcoder.toggleReadMode",
        "title": "LipCoder: Toggle Read Mode (Token/Word)"
      },
      {
        "command": "lipcoder.toggleCursorLineReading",
        "title": "LipCoder: Toggle Cursor Line Reading"
      },
      {
        "command": "lipcoder.toggleAudioMinimap",
        "title": "LipCoder: Toggle Audio Minimap"
      },
      {
        "command": "lipcoder.setAudioMinimapSpeed",
        "title": "LipCoder: Set Audio Minimap Speed Threshold"
      },
      {
        "command": "lipcoder.selectTTSBackend",
        "title": "LipCoder: Select TTS Backend",
        "category": "TTS"
      },
      {
        "command": "lipcoder.switchToSileroGPT",
        "title": "LipCoder: Silero (English) + GPT (Korean)",
        "category": "TTS"
      },
      {
        "command": "lipcoder.switchToEspeakGPT",
        "title": "LipCoder: Espeak (English) + GPT (Korean)",
        "category": "TTS"
      },
      {
        "command": "lipcoder.switchToXTTSV2",
        "title": "LipCoder: XTTS-v2 (Universal Korean + English)",
        "category": "TTS"
      },
      {
        "command": "lipcoder.ensureMMSTTS",
        "title": "LipCoder: Ensure MMS-TTS Server Running",
        "category": "TTS"
      },
      {
        "command": "lipcoder.restartKoreanTTS",
        "title": "🇰🇷 LipCoder: Restart Korean TTS Server",
        "category": "TTS"
      },
      {
        "command": "lipcoder.showKoreanTTSStatus",
        "title": "🇰🇷 LipCoder: Show Korean TTS Status",
        "category": "TTS"
      },
      {
        "command": "lipcoder.showTTSStatus",
        "title": "LipCoder: Show TTS Backend Status",
        "category": "TTS"
      },
      {
        "command": "lipcoder.toggleEarconMode",
        "title": "LipCoder: Toggle Earcon Mode (Parentheses → Sound → Text)",
        "category": "Audio"
      },
      {
        "command": "lipcoder.selectEarconMode",
        "title": "LipCoder: Select Earcon Mode",
        "category": "Audio"
      },
      {
        "command": "lipcoder.setEarconModeSound",
        "title": "LipCoder: Set Earcon Mode to Sound",
        "category": "Audio"
      },
      {
        "command": "lipcoder.setEarconModeText",
        "title": "LipCoder: Set Earcon Mode to Text",
        "category": "Audio"
      },
      {
        "command": "lipcoder.setEarconModeParenthesesOnly",
        "title": "LipCoder: Set Earcon Mode to Parentheses Only",
        "category": "Audio"
      },
      {
        "command": "lipcoder.showEarconMode",
        "title": "LipCoder: Show Current Earcon Mode",
        "category": "Audio"
      },
      {
        "command": "lipcoder.restartLanguageServer",
        "title": "LipCoder: Restart Language Server",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.testThinkingAudio",
        "title": "LipCoder: Test Thinking Audio",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.testCommentVoice",
        "title": "LipCoder: Test Comment Voice",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.testCommentTokenization",
        "title": "LipCoder: Test Comment Tokenization",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.testActivityLogging",
        "title": "LipCoder: Test Activity Logging",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.openActivityLogs",
        "title": "LipCoder: Open Activity Logs",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.analyzeMetrics",
        "title": "LipCoder: Analyze Session Metrics",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.startASRCommandMode",
        "title": "Start ASR Command Mode",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.stopASRCommandMode",
        "title": "Stop ASR Command Mode",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.startASRWriteMode",
        "title": "Start ASR Write Mode",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.stopASRWriteMode",
        "title": "Stop ASR Write Mode",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.testKoreanTTS",
        "title": "Test Korean TTS",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.terminalWordRight",
        "title": "LipCoder: Terminal Word Right (Option+Right Arrow)",
        "category": "Terminal"
      },
      {
        "command": "lipcoder.terminalWordLeft",
        "title": "LipCoder: Terminal Word Left (Option+Left Arrow)",
        "category": "Terminal"
      },
      {
        "command": "lipcoder.editorWordRight",
        "title": "LipCoder: Editor Word Right (Option+Right Arrow)",
        "category": "Editor"
      },
      {
        "command": "lipcoder.editorWordLeft",
        "title": "LipCoder: Editor Word Left (Option+Left Arrow)",
        "category": "Editor"
      },
      {
        "command": "lipcoder.showDebugOutput",
        "title": "LipCoder: Show Debug Output",
        "category": "Debug"
      },
      {
        "command": "lipcoder.openDeveloperConsole",
        "title": "LipCoder: Open Developer Console",
        "category": "Debug"
      },
      {
        "command": "lipcoder.clearDebugOutput",
        "title": "LipCoder: Clear Debug Output",
        "category": "Debug"
      },
      {
        "command": "lipcoder.testLogging",
        "title": "LipCoder: Test Logging System",
        "category": "Debug"
      },
      {
        "command": "lipcoder.showAllOutputChannels",
        "title": "LipCoder: Show All Output Channels",
        "category": "Debug"
      },
      {
        "command": "lipcoder.copy",
        "title": "LipCoder: Copy with Audio Feedback",
        "category": "Clipboard"
      },
      {
        "command": "lipcoder.cut",
        "title": "LipCoder: Cut with Audio Feedback",
        "category": "Clipboard"
      },
      {
        "command": "lipcoder.잘라내기",
        "title": "LipCoder: 잘라내기 (Cut) with Audio Feedback",
        "category": "Clipboard"
      },
      {
        "command": "lipcoder.paste",
        "title": "LipCoder: Paste with Audio Feedback",
        "category": "Clipboard"
      },
      {
        "command": "lipcoder.testCopySound",
        "title": "LipCoder: Test Copy Sound",
        "category": "Clipboard"
      },
      {
        "command": "lipcoder.testPasteSound",
        "title": "LipCoder: Test Paste Sound",
        "category": "Clipboard"
      },
      {
        "command": "lipcoder.startRealtimeCommands",
        "title": "🎤 Start Realtime Voice Commands",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.stopRealtimeCommands",
        "title": "🛑 Stop Realtime Voice Commands",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.toggleRealtimeCommands",
        "title": "🔄 Toggle Realtime Voice Commands",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.showVibeCodingDiff",
        "title": "Vibe Coding: Show Diff (Copilot-style)",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.acceptVibeCodingChange",
        "title": "Vibe Coding: Accept Changes",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.rejectVibeCodingChange",
        "title": "Vibe Coding: Reject Changes",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.showSuggestionHistory",
        "title": "Vibe Coding: Suggestion History",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.continueWithSuggestions",
        "title": "Vibe Coding: Continue with Suggestions",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.startVibeCoding",
        "title": "Vibe Coding: Start (Natural Language…)",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.triggerInlineSuggestion",
        "title": "LipCoder: Trigger Inline Suggestion",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.goToLineNumber",
        "title": "LipCoder: Go to Line Number",
        "category": "Navigation"
      },
      {
        "command": "lipcoder.showExactCommandsHelp",
        "title": "LipCoder: Show Voice Commands Help",
        "category": "Help"
      },
      {
        "command": "lipcoder.openPngFile",
        "title": "LipCoder: Open Generated PNG File",
        "category": "File"
      },
      {
        "command": "lipcoder.naturalLanguageCommand",
        "title": "LipCoder: Natural Language Command",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.quickNaturalLanguageCommand",
        "title": "LipCoder: Quick Natural Language Commands",
        "category": "LipCoder"
      },
      {
        "command": "lipcoder.setupVenv",
        "title": "LipCoder: Setup Python Virtual Environment",
        "category": "Setup"
      },
      {
        "command": "lipcoder.checkVenvStatus",
        "title": "LipCoder: Check Virtual Environment Status",
        "category": "Setup"
      },
      {
        "command": "lipcoder.resetVenv",
        "title": "LipCoder: Reset Virtual Environment",
        "category": "Setup"
      },
      {
        "command": "lipcoder.checkNativeModules",
        "title": "LipCoder: Check Native Modules (node-pty, speaker)",
        "category": "Setup"
      },
      {
        "command": "lipcoder.runFirstTimeSetup",
        "title": "LipCoder: 🚀 First Time Setup (신규 사용자 자동 설정)",
        "category": "Auto Setup"
      },
      {
        "command": "lipcoder.resetSetup",
        "title": "LipCoder: ⚠️ Reset First Time Setup",
        "category": "Auto Setup"
      },
      {
        "command": "lipcoder.checkSetupStatus",
        "title": "LipCoder: ✅ Check Auto Setup Status",
        "category": "Auto Setup"
      }
    ],
    "menus": {
      "explorer/context": [
        {
          "command": "lipcoder.analyzeImageFromExplorer",
          "when": "resourceExtname =~ /\\.(jpg|jpeg|png|gif|webp|bmp)$/i",
          "group": "lipcoder@1"
        }
      ]
    },
    "keybindings": [
      {
        "command": "lipcoder.stopAllAudio",
        "key": "ctrl+.",
        "mac": "cmd+.",
        "when": "editorTextFocus"
      },
      {
        "command": "lipcoder.stopAllAudio",
        "key": "ctrl+.",
        "mac": "cmd+."
      },
      {
        "command": "lipcoder.readCurrentLine",
        "key": "ctrl+alt+l",
        "when": "editorTextFocus"
      },
      {
        "key": "ctrl+alt+m",
        "command": "lipcoder.toggleReadMode",
        "when": "editorTextFocus"
      },
      {
        "command": "lipcoder.readFunctionTokens",
        "key": "ctrl+alt+f",
        "when": "editorTextFocus"
      },
      {
        "key": "up",
        "command": "lipcoder.explorerUp",
        "when": "explorerViewletVisible && explorerViewletFocus"
      },
      {
        "key": "down",
        "command": "lipcoder.explorerDown",
        "when": "explorerViewletVisible && explorerViewletFocus"
      },
      {
        "key": "ctrl+h",
        "command": "lipcoder.toggleTerminalReadingMode",
        "when": "terminalFocus"
      },
      {
        "key": "ctrl+l",
        "command": "lipcoder.terminalReadLast",
        "when": "terminalFocus"
      },
      {
        "key": "ctrl+shift+c",
        "command": "lipcoder.terminalClearHistory",
        "when": "terminalFocus"
      },
      {
        "key": "ctrl+d",
        "command": "lipcoder.debugTerminalState",
        "when": "terminalFocus"
      },
      {
        "command": "lipcoder.formatCode",
        "key": "shift+alt+f",
        "when": "editorTextFocus && !editorReadonly"
      },
      {
        "command": "lipcoder.triggerInlineSuggestion",
        "key": "shift+enter",
        "when": "editorTextFocus && !inlineSuggestionVisible"
      },
      {
        "command": "lipcoder.acceptSuggestion",
        "key": "shift+enter",
        "when": "inlineSuggestionVisible"
      },
      {
        "command": "lipcoder.rejectSuggestion",
        "key": "escape",
        "when": "editorTextFocus && inlineSuggestionVisible"
      },
      {
        "command": "lipcoder.applyCurrentChange",
        "key": "shift+enter",
        "when": "editorTextFocus && vibeCodingDiffVisible"
      },
      {
        "command": "lipcoder.rejectCurrentChange",
        "key": "shift+escape",
        "when": "editorTextFocus && vibeCodingDiffVisible"
      },
      {
        "command": "lipcoder.rejectSuggestion",
        "key": "shift+backspace",
        "when": "editorTextFocus && inlineSuggestionVisible"
      },
      {
        "command": "lipcoder.vibeCoding",
        "key": "ctrl+shift+v",
        "when": "editorTextFocus"
      },
      {
        "command": "lipcoder.openTerminal",
        "key": "ctrl+`"
      },
      {
        "command": "lipcoder.killTerminalAndOpenLipCoder",
        "key": "ctrl+shift+k",
        "when": "terminalFocus"
      },
      {
        "command": "lipcoder.startASRRecording",
        "key": "ctrl+shift+a",
        "when": "!lipcoder.isRecording"
      },
      {
        "command": "lipcoder.stopASRRecording",
        "key": "ctrl+shift+a",
        "when": "lipcoder.isRecording"
      },
      {
        "command": "lipcoder.acceptDiff",
        "key": "ctrl+shift+y",
        "when": "editorTextFocus"
      },
      {
        "command": "lipcoder.rejectDiff",
        "key": "ctrl+shift+n",
        "when": "editorTextFocus"
      },
      {
        "command": "lipcoder.terminalWordRight",
        "key": "alt+right",
        "mac": "alt+right",
        "when": "terminalFocus"
      },
      {
        "command": "lipcoder.terminalWordLeft",
        "key": "alt+left",
        "mac": "alt+left",
        "when": "terminalFocus"
      },
      {
        "command": "lipcoder.editorWordRight",
        "key": "alt+right",
        "mac": "alt+right",
        "when": "editorTextFocus"
      },
      {
        "command": "lipcoder.editorWordLeft",
        "key": "alt+left",
        "mac": "alt+left",
        "when": "editorTextFocus"
      },
      {
        "command": "lipcoder.showKoreanTTSStatus",
        "key": "ctrl+alt+k",
        "mac": "cmd+alt+k",
        "when": "editorTextFocus"
      }
    ],
    "configuration": {
      "title": "LipCoder",
      "properties": {
        "lipcoder.openaiApiKey": {
          "type": "string",
          "default": "",
          "description": "Your OpenAI API key for ChatGPT completions."
        },
        "lipcoder.claudeApiKey": {
          "type": "string",
          "default": "",
          "description": "Your Anthropic API key for Claude completions."
        },
        "lipcoder.llmBackend": {
          "type": "string",
          "enum": [
            "chatgpt",
            "claude"
          ],
          "default": "claude",
          "description": "Choose the LLM backend for vibe coding and chat completions."
        },
        "lipcoder.claudeModel": {
          "type": "string",
          "enum": [
            "claude-opus-4-1-20250805",
            "claude-sonnet-4-20250514",
            "claude-3-5-haiku-20241022"
          ],
          "default": "claude-sonnet-4-20250514",
          "description": "Claude model to use for completions."
        },
        "lipcoder.claudeMaxTokens": {
          "type": "number",
          "default": 2000,
          "description": "Maximum tokens for Claude responses."
        },
        "lipcoder.claudeTemperature": {
          "type": "number",
          "default": 0.1,
          "minimum": 0,
          "maximum": 1,
          "description": "Temperature for Claude responses (0.0 = deterministic, 1.0 = creative)."
        },
        "lipcoder.asrBackend": {
          "type": "string",
          "enum": [
            "gpt4o-transcribe",
            "silero"
          ],
          "default": "gpt4o-transcribe",
          "description": "Choose the ASR backend for voice recognition. GPT-4o Transcribe supports multilingual recognition including Korean and English."
        },
        "lipcoder.asrLanguage": {
          "type": [
            "string",
            "null"
          ],
          "enum": [
            null,
            "en",
            "ko",
            "ja",
            "zh",
            "es",
            "fr",
            "de",
            "it",
            "pt",
            "ru"
          ],
          "default": null,
          "description": "Language for ASR recognition. Set to null for automatic language detection (supports Korean, English, and many others). Only works with GPT-4o Transcribe backend."
        },
        "lipcoder.diffPreviewMode": {
          "type": "string",
          "enum": [
            "native",
            "inline",
            "popup"
          ],
          "default": "native",
          "description": "Choose how to preview code changes: 'native' uses VS Code's built-in diff viewer, 'inline' shows diff in a separate editor, 'popup' shows simple confirmation dialog."
        },
        "lipcoder.openaiTTSVolumeBoost": {
          "type": "number",
          "default": 1.3,
          "minimum": 0.1,
          "maximum": 3,
          "description": "Volume boost multiplier for Korean TTS (1.0 = no change, 1.3 = 30% louder). Only affects Korean text when using OpenAI TTS."
        },
        "lipcoder.ttsBackend": {
          "type": "string",
          "enum": [
            "silero-gpt",
            "espeak-gpt",
            "espeak",
            "xtts-v2",
            "macos-gpt",
            "macos"
          ],
          "default": "macos",
          "description": "Choose the TTS backend: 'silero-gpt' for Silero (English) + GPT (Korean), 'espeak-gpt' for Espeak (English) + GPT (Korean), 'espeak' for Espeak (all languages), 'xtts-v2' for XTTS-v2 (both languages), 'macos-gpt' for macOS native voice (English) + GPT (Korean), 'macos' for macOS native voice (all languages)."
        },
        "lipcoder.xttsV2ServerUrl": {
          "type": "string",
          "default": "http://localhost:5006/tts",
          "description": "URL of the XTTS-v2 server for Korean and English text-to-speech."
        },
        "lipcoder.xttsV2SampleRate": {
          "type": "number",
          "default": 24000,
          "enum": [
            16000,
            24000
          ],
          "description": "Sample rate for XTTS-v2 audio output (16000 or 24000 Hz)."
        },
        "lipcoder.xttsV2VolumeBoost": {
          "type": "number",
          "default": 1,
          "minimum": 0.1,
          "maximum": 3,
          "description": "Volume boost multiplier for XTTS-v2 audio (1.0 = no change, 1.5 = 50% louder)."
        },
        "lipcoder.xttsV2SpeakerWav": {
          "type": "string",
          "default": "",
          "description": "Path to speaker reference WAV file for voice cloning with XTTS-v2 (optional)."
        },
        "lipcoder.macosVoice": {
          "type": "string",
          "default": "Yuna",
          "description": "Default macOS voice for text-to-speech. Common voices: Yuna (Korean), Samantha, Victoria, Daniel, Karen, Moira, Tessa, Veena, Fiona. Use 'say -v ?' in Terminal to see all available voices."
        },
        "lipcoder.macosRate": {
          "type": "number",
          "default": 200,
          "minimum": 50,
          "maximum": 500,
          "description": "Speech rate for macOS TTS in words per minute (default: 200)."
        },
        "lipcoder.macosVolume": {
          "type": "number",
          "default": 0.7,
          "minimum": 0,
          "maximum": 1,
          "description": "Volume level for macOS TTS (0.0 = silent, 1.0 = maximum)."
        },
        "lipcoder.macosSampleRate": {
          "type": "number",
          "default": 24000,
          "enum": [
            16000,
            22050,
            24000,
            44100,
            48000
          ],
          "description": "Sample rate for macOS TTS audio output (Hz)."
        },
        "lipcoder.autoOverwriteFiles": {
          "type": "boolean",
          "default": true,
          "description": "Automatically overwrite files when save conflicts occur (prevents 'content is newer' dialogs)."
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "npm run check-types && npm run lint && node esbuild.js",
    "gen:espeak-assets": "node scripts/generate_espeak_assets.js",
    "gen:text-earcons": "node scripts/generate_text_earcons.js",
    "watch": "npm-run-all -p watch:*",
    "watch:esbuild": "node esbuild.js --watch",
    "watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
    "package": "npm run check-types && npm run lint && node esbuild.js --production",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "check-types": "tsc --noEmit -p shared/tsconfig.json && tsc --noEmit -p server/tsconfig.json && tsc --noEmit -p client/tsconfig.json",
    "lint": "eslint client/src server/src shared/src",
    "test": "vscode-test",
    "build": "tsc -b shared && tsc -b server && tsc -b client",
    "watch:build": "tsc -b server --watch & tsc -b client --watch",
    "postinstall": "node ./scripts/download-silero-models.js",
    "setup-node": "node scripts/find-node-path.js",
    "setup": "npm run setup-node && npm run build"
  },
  "devDependencies": {
    "@electron/rebuild": "^4.0.1",
    "@types/mocha": "^10.0.10",
    "@types/node": "20.x",
    "@types/node-fetch": "^2.6.12",
    "@types/vscode": "^1.100.0",
    "@typescript-eslint/eslint-plugin": "^8.31.1",
    "@typescript-eslint/parser": "^8.31.1",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.5.2",
    "electron-rebuild": "^3.2.9",
    "esbuild": "^0.25.3",
    "eslint": "^9.25.1",
    "npm-run-all": "^4.1.5",
    "typescript": "^5.8.3"
  },
  "dependencies": {
    "@anthropic-ai/sdk": "^0.60.0",
    "@types/diff": "7.0.2",
    "@types/wav": "1.0.4",
    "diff": "8.0.2",
    "node-fetch": "^2.7.0",
    "node-microphone": "0.1.6",
    "openai": "5.16.0",
    "ts-node": "^10.9.2",
    "undici": "^7.11.0",
    "vscode-languageclient": "^9.0.0",
    "vscode-languageserver": "^9.0.1",
    "vscode-languageserver-textdocument": "1.0.12",
    "wav": "1.0.2",
    "word-list": "^4.1.0"
  },
  "optionalDependencies": {
    "node-pty": "^1.0.0",
    "node-pty-prebuilt-multiarch": "0.10.1-pre.10",
    "speaker": "0.5.5"
  }
}
